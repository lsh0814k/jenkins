pipeline {
    // 어떠한 에이전트에서도 실행 가능함을 표현
    agent any

    // 환경변수 지정
     environment {
        SONAR_SCANNER_HOME = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'   
     }
    
    triggers {
        // pollSCM '*/10 * * * *'
        githubPush()
    }
    
    options {
        // 빌드를 5개만 유지
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '5', numToKeepStr: '5')   
        githubProjectProperty(displayName: '', projectUrlStr: 'https://github.com/lsh0814k/jenkins')
    }
    
    //parameters {
    //    booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
    //}

 
    // stages > stage > steps 순으로 구성
    stages {
        stage('Prepare') {
            steps {
                // 어떤 환경변수가 주입되는지 확인
                sh "printenv"
                script {
                    properties([
                        parameters([
                            gitParameter(branch: '', branchFilter: '.*', defaultValue: 'origin/main', description: '배포할 브랜치를 선택합니다.', listSize: '3', name: 'BRANCH', quickFilterEnabled: true, selectedValue: 'NONE', sortMode: 'ASCENDING_SMART', tagFilter: '*', type: 'GitParameterDefinition'),
                                    // https://www.jenkins.io/doc/pipeline/steps/pipeline-input-step/#input-wait-for-interactive-input
                                    [
                                            $class              : 'DynamicReferenceParameter',
                                            choiceType          : 'ET_FORMATTED_HTML',
                                            name                : 'BRANCH_TO_BUILD',
                                            referencedParameters: 'BRANCH',
                                            script              : [
                                                    $class        : 'GroovyScript',
                                                    script        : [
                                                            sandbox: true,
                                                            script : groovy_script()
                                                    ],
                                                    fallbackScript: [
                                                            sandbox: true,
                                                            script : 'return ""'
                                                    ]
                                            ]
                                    ],
                                    booleanParam(defaultValue: true, description: '배포 포함 여부', name: 'DEPLOY_ENABLED')
                        ])
                    ])
                }
            }
        }
        
        // github checkout 설정
        // Pipeline script from SCM 으로 지정하면 자동으로 체크아웃을 하기 때문에 필요 없다.
        //stage('Checkout') {
        //    steps {
        //        checkout scmGit(
        //            branches: [[name: "${params.BRANCH}"]],
        //            userRemoteConfigs: [[
        //                credentialsId: 'github-ssh',
        //                url: 'git@github.com:lsh0814k/jenkins.git']
        //            ],
        //            extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'projects/spring-app']]]]
        //        )
        //    }
        //}
        
        stage('Build') {
            steps {
                // dir 은 디렉토리 이동
                dir("projects/spring-app") {
                    // withGradle 을 하면, Gradle 로그를 해석
                    withGradle {
                        sh "./gradlew build"
                    }
                }
            }
        }
        
        stage('SonarScanner') {
            steps {
                // sonarqube 환경하에서 실행
                withSonarQubeEnv("sonarqube-server") {
                    sh """
                        ${env.SONAR_SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://sonarqube:9000 \
                        -Dsonar.projectKey=practice1 \
                        -Dsonar.projectBaseDir=${WORKSPACE}/projects/spring-app
                    """
                }
                
                // quality gate 통과시 까지 대기
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
    
    // post 는 stage 마다 실행시킬 수도 있고, 전체가 stages가 완료된 다음에 실행시킬 수도 있다.
    post {
        always {
            junit '**/test-results/**/*.xml'
            jacoco sourcePattern: '**/src/main/kotlin'
            mineRepository()
            // emailext attachLog: true, body: email_content(), subject: email_subject(), to: '메일주소'
            // slackSend channel: "#jenkins", message: "${custom_msg(currentBuild.currentResult)}"
        }
        
        success {
            archiveArtifacts artifacts:'projects/spring-app/build/libs/*-SNAPSHOT.jar'
            script {
                if (params.DEPLOY_ENABLED == true) {
                    build(
                        job: 'pipeline-deploy',
                        parameters: [booleanParam(name: 'ARE_YOU_SURE', value: "true")],
                        wait: false,
                        propagate: false
                    )        
                }
            }
        }
    }
}

def groovy_script() {
  return '''if (BRANCH == "") {
      return "origin/main 가 빌드 됩니다."
  } else {
      return "$BRANCH 가 빌드 됩니다."
  }'''
}


def email_subject() {
    '빌드통지 - ${DEFAULT_SUBJECT}'
}

def email_content() {
    return '''
        메일 내용
        ${DEFAULT_CONTENT}
    '''
}

def custom_msg(status) {
    return "$status: Job [${env.JOB_NAME}] Logs path: ${env.BUILD_URL}/consoleText"
}
